---

  # Perform sanity checks (check if there is a working set to
  # perform the rest of operations with)
  - include_role:
      name: generic
      tasks_from: checks
    when: checks_passed is not defined
  - set_fact:
      checks_passed: true

  # Create vCloud API session and get token cookie
  - include_role:
      name: vmware
      tasks_from: vmware_login
    when: vmware_login is not defined 
  - assert:
      that:
        - vmware_login.x_vcloud_authorization != ""
      msg: "Could not create session towards VMware vCloud API!"

  # Query if specified vApp exists
  - include_role:
      name: vmware
      tasks_from: query_specific_vapp
  - assert:
      that:
        - query_specific_vapp_result.value != ""
      msg: "Specified vApp does not exist!"

  # Get vApp details
  - include_role:
      name: vmware
      tasks_from: get_vapp_details

  # Count VMs inside vApp
  - name: Count all VMs inside vApp
    xml:
      path: "{{ tmp_dir }}/vapp_details.xml"
      xpath: /n:VApp/n:Children/n:Vm
      namespaces:
        n: http://www.vmware.com/vcloud/v1.5
      count: yes
    register: vms_total

  - debug:
      var: vms_total.count
      verbosity: 3

  # Get vApp VMs details
  - include_role: 
      name: vmware
      tasks_from: get_vms_details
    with_sequence: start=1 end={{ vms_total.count | int }} stride=1

  # vCloud API session logout
  - include_role:
      name: vmware
      tasks_from: vmware_logout
    when: logout_when_finished
